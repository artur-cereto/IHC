4
# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-08-30 12:56:07
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from sys import argv

def IHC(Workspace="C:\\temp", Pits_Removed_DTM=r"{Workspace}\dtmfillok.tif", Cell_Size=1, Weighting_Factor=r"{Workspace}\Wfactor.tif", Index_of_Hydrosedimentological_Connectivity=r"{Workspace}\ihc.tif", IPS="ips", Qrunoff=r"{Workspace}\Qrun.tif"):  # IHC

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")
    arcpy.CheckOutExtension("3D")

    arcpy.ImportToolbox(r"C:\Program Files\TauDEM\TauDEM5Arc\TauDEM Tools.tbx")
    # Model Environment settings
    with arcpy.EnvManager(cellSize="MAXOF", extent=Pits_Removed_DTM, mask=Pits_Removed_DTM, 
                          scratchWorkspace=Workspace, snapRaster=Pits_Removed_DTM):

        # Process: D-Infinity Flow Directions (D-Infinity Flow Directions) ()
        dtmfillokang_tif = fr"{Workspace}\dtmfillokang.tif"
        dtmfillokslp_tif = fr"{Workspace}\dtmfillokslp.tif"
        arcpy..DinfFlowDir(Input_Pit_FIlled_Elevation_Grid=Pits_Removed_DTM.__str__().format(**locals(),**globals()), Input_Number_of_Processes=8, Output_D-Infinity_Flow_Direction_Grid=dtmfillokang_tif, Output_D-Infinity_Slope_Grid=dtmfillokslp_tif)
        dtmfillokang_tif = arcpy.Raster(dtmfillokang_tif)
        dtmfillokslp_tif = arcpy.Raster(dtmfillokslp_tif)

        # Process: D8 Flow Directions (D8 Flow Directions) ()
        dtmfillokp_tif = fr"{Workspace}\dtmfillokp.tif"
        dtmfilloksd8_tif = fr"{Workspace}\dtmfilloksd8.tif"
        arcpy..D8FlowDir(Input_Pit_Filled_Elevation_Grid=Pits_Removed_DTM.__str__().format(**locals(),**globals()), Input_Number_of_Processes=8, Output_D8_Flow_Direction_Grid=dtmfillokp_tif, Output_D8_Slope_Grid=dtmfilloksd8_tif)
        dtmfillokp_tif = arcpy.Raster(dtmfillokp_tif)
        dtmfilloksd8_tif = arcpy.Raster(dtmfilloksd8_tif)

        # Process: D8 Contributing Area (D8 Contributing Area) ()
        fillad8_tif = fr"{Workspace}\dtmfillokad8.tif"
        arcpy..D8ContributingArea(Input_D8_Flow_Direction_Grid=dtmfillokp_tif, Check_for_edge_contamination=False, Input_Number_of_Processes=8, Output_D8_Contributing_Area_Grid=fillad8_tif)
        fillad8_tif = arcpy.Raster(fillad8_tif)

        # Process: accumulating W (D-Infinity Contributing Area) ()
        accW_tif = fr"{Workspace}\accW.tif"
        arcpy..AreaDinf(Input_D-Infinity_Flow_Direction_Grid=dtmfillokang_tif, Input_Weight_Grid=Weighting_Factor.__str__().format(**locals(),**globals()), Check_for_Edge_Contamination=False, Input_Number_of_Processes=8, Output_D-Infinity_Specific_Catchment_Area_Grid=accW_tif)
        accW_tif = arcpy.Raster(accW_tif)

        # Process: D-Infinity Contributing Area (D-Infinity Contributing Area) ()
        dtmfilloksca_tif = fr"{Workspace}\dtmfilloksca.tif"
        arcpy..AreaDinf(Input_D-Infinity_Flow_Direction_Grid=dtmfillokang_tif, Check_for_Edge_Contamination=False, Input_Number_of_Processes=8, Output_D-Infinity_Specific_Catchment_Area_Grid=dtmfilloksca_tif)
        dtmfilloksca_tif = arcpy.Raster(dtmfilloksca_tif)

        # Process: Create Constant Raster (Create Constant Raster) (sa)
        resolution_tif = fr"{Workspace}\resolution.tif"
        Create_Constant_Raster = resolution_tif
        resolution_tif = arcpy.sa.CreateConstantRaster(Cell_Size.__str__().format(**locals(),**globals()), "FLOAT", Pits_Removed_DTM.__str__().format(**locals(),**globals()), dtmfillokang_tif)
        resolution_tif.save(Create_Constant_Raster)


        # Process: Divide (Divide) (sa)
        ACCfinal_tif = fr"{Workspace}\ACCfinal.tif"
        Divide = ACCfinal_tif
        ACCfinal_tif = arcpy.sa.Divide(dtmfilloksca_tif, resolution_tif)
        ACCfinal_tif.save(Divide)


        # Process: Computing C mean (Raster Calculator) (sa)
        cmean_tif = fr"{Workspace}\cmean.tif"
        Computing_C_mean = cmean_tif
        cmean_tif = (accW_tif + Weighting_Factor) / ACCfinal_tif
        cmean_tif.save(Computing_C_mean)


        # Process: Imposing upper and lower limits to Slope (Raster Calculator) (sa)
        s_tif = fr"{Workspace}\s.tif"
        Imposing_upper_and_lower_limits_to_Slope = s_tif
        s_tif = Con(dtmfilloksd8_tif  < 0.005, 0.005, Con(dtmfilloksd8_tif> 1, 1, dtmfilloksd8_tif))
        s_tif.save(Imposing_upper_and_lower_limits_to_Slope)


        # Process: accumulating S (D-Infinity Contributing Area) ()
        accS_tif = fr"{Workspace}\accS.tif"
        arcpy..AreaDinf(Input_D-Infinity_Flow_Direction_Grid=dtmfillokang_tif, Input_Weight_Grid=s_tif, Check_for_Edge_Contamination=False, Input_Number_of_Processes=8, Output_D-Infinity_Specific_Catchment_Area_Grid=accS_tif)
        accS_tif = arcpy.Raster(accS_tif)

        # Process: Computing S mean (Raster Calculator) (sa)
        smean_tif = fr"{Workspace}\smean.tif"
        Computing_S_mean = smean_tif
        smean_tif = (accS_tif + s_tif) / ACCfinal_tif
        smean_tif.save(Computing_S_mean)


        # Process: Accumulating q (D-Infinity Contributing Area) ()
        accq_tif = fr"{Workspace}\accq.tif"
        arcpy..AreaDinf(Input_D-Infinity_Flow_Direction_Grid=dtmfillokang_tif, Input_Weight_Grid=Qrunoff.__str__().format(**locals(),**globals()), Check_for_Edge_Contamination=False, Input_Number_of_Processes=8, Output_D-Infinity_Specific_Catchment_Area_Grid=accq_tif)
        accq_tif = arcpy.Raster(accq_tif)

        # Process: unittransformation (Raster Calculator) (sa)
        qrunm_tif_ = fr"{Workspace}\qrunm.tif"
        unittransformation = qrunm_tif_
        qrunm_tif_ = accq_tif / 1000
        qrunm_tif_.save(unittransformation)


        # Process: IPSs (Raster Calculator) (sa)
        IPSxQr = fr"{Workspace}\IPSxQr.tif"
        IPSs = IPSxQr
        IPSxQr = IPS * qrunm_tif_
        IPSxQr.save(IPSs)


        # Process: Computing Upslope Component (Raster Calculator) (sa)
        Dup_tif = fr"{Workspace}\Dup.tif"
        Computing_Upslope_Component = Dup_tif
        Dup_tif = cmean_tif * smean_tif *IPSxQr* resolution_tif *resolution_tif
        Dup_tif.save(Computing_Upslope_Component)


        # Process: Reclassify (Reclassify) (sa)
        flowd8 = fr"{Workspace}\flowd8"
        Reclassify = flowd8
        flowd8 = arcpy.sa.Reclassify(dtmfillokp_tif, "Value", "1 1;2 128;3 64;4 32;5 16;6 8;7 4;8 2", "DATA")
        flowd8.save(Reclassify)


        # Process: Integrating Sinks and Targets into D8 Flow directions (Raster Calculator) (sa)
        flowdir_tif = fr"{Workspace}\flowdir.tif"
        Integrating_Sinks_and_Targets_into_D8_Flow_directions = flowdir_tif
        flowdir_tif = flowd8
        flowdir_tif.save(Integrating_Sinks_and_Targets_into_D8_Flow_directions)


        # Process: Computing 1/(W*S) (Raster Calculator) (sa)
        invCS_tif = fr"{Workspace}\invCS.tif"
        Computing_1_W_S_ = invCS_tif
        invCS_tif = 1 /(Weighting_Factor*s_tif)
        invCS_tif.save(Computing_1_W_S_)


        # Process: Flow Length (Flow Length) (sa)
        X_tif = fr"{Workspace}\X.tif"
        Flow_Length = X_tif
        X_tif = arcpy.sa.FlowLength(flowdir_tif, "DOWNSTREAM", invCS_tif)
        X_tif.save(Flow_Length)


        # Process: Computing Downslope Component (Raster Calculator) (sa)
        Ddn_tif = fr"{Workspace}\Ddn.tif"
        Computing_Downslope_Component = Ddn_tif
        Ddn_tif = (X_tif == 0 * invCS_tif) + X_tif
        Ddn_tif.save(Computing_Downslope_Component)


        # Process: Computing Connectivity Index (Raster Calculator) (sa)
        Computing_Connectivity_Index = Index_of_Hydrosedimentological_Connectivity
        Index_of_Hydrosedimentological_Connectivity = Log10(Dup_tif / Ddn_tif)
        Index_of_Hydrosedimentological_Connectivity.save(Computing_Connectivity_Index)


if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(workspace="C:\\Users\\admin\\Documents\\ArcGIS\\Projects\\IHC\\IHC.gdb"):
        IHC(*argv[1:])
